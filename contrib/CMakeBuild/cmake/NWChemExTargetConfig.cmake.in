################################################################################
#                                                                              #
# This file generated from NWChemExTargetConfig.cmake.in. Do not edit.         #
#                                                                              #
################################################################################

include(FindPackageHandleStandardArgs)
find_package(CMakeBuild REQUIRED)
include(AssertMacros)
#Get the install root by assuming we are in root/share/cmake/ProjectName
set(INSTALL_ROOT      "${CMAKE_CURRENT_LIST_DIR}") #ProjectName/

foreach(__iter RANGE 2)
    get_filename_component(INSTALL_ROOT "${INSTALL_ROOT}" DIRECTORY)
endforeach()

#Name of the library
set(__name @NWCHEMEX_LIBRARY_NAME@)
string(TOUPPER ${__name} __NAME)

#Find the actual library (if there is one)
if(@HAS_LIBRARY@)
    set(__names "")
    foreach(_prefix "lib" "")
        foreach(_suffix ${CMAKE_SHARED_LIBRARY_SUFFIX}
                        ${CMAKE_STATIC_LIBRARY_SUFFIX})
            list(APPEND __names ${_prefix}${__name}${_suffix})
        endforeach()
    endforeach()

    find_library(${__NAME}_LIBRARY NAMES ${__names}
                 PATHS ${INSTALL_ROOT}/lib/${__name})
    FIND_PACKAGE_HANDLE_STANDARD_ARGS(${__NAME} DEFAULT_MSG ${__NAME}_LIBRARY)
endif()

#Find paths to all header files part of the public API
set(__headers @NWCHEMEX_LIBRARY_HEADERS@)
foreach(__header_i ${__headers})
   get_filename_component(__file_name ${__header_i} NAME_WE)

   #Make a list of where we found each header file and ensure they all have
   #the same include path
   list(APPEND ${__name}_HEADERS ${__file_name}_INCLUDE_DIR)

   #If another dependency has the same include this value is still set..
   unset(${__file_name}_INCLUDE_DIR CACHE)
   find_path(${__file_name}_INCLUDE_DIR ${__name}/${__header_i}
             PATHS ${INSTALL_ROOT}/include)
   #All header files better result in same include path...
   if(${__NAME}_INCLUDE_DIR)
       assert_strings_are_equal(${__NAME}_INCLUDE_DIR
                                ${__file_name}_INCLUDE_DIR)
   else()
       set(${__NAME}_INCLUDE_DIR ${${__file_name}_INCLUDE_DIR})
   endif()
endforeach()
FIND_PACKAGE_HANDLE_STANDARD_ARGS(${__NAME} DEFAULT_MSG  "${${__name}_HEADERS}")

#find_package will only crash for a variable of the same case
set(${__name}_FOUND ${${__NAME}_FOUND})


set(${__NAME}_LIBRARIES ${${__NAME}_LIBRARY})
set(${__NAME}_INCLUDE_DIRS ${${__NAME}_INCLUDE_DIR})

set(CBLAS_INCLUDE_DIRS "@CBLAS_INCLUDE_DIRS@")
set(LAPACKE_INCLUDE_DIRS "@LAPACKE_INCLUDE_DIRS@")
set(CBLAS_LIBRARIES "@CBLAS_LIBRARIES@")
set(LAPACKE_LIBRARIES "@LAPACKE_LIBRARIES@")
set(SCALAPACK_LIBRARIES "@SCALAPACK_LIBRARIES@")
set(TAMM_CXX_FLAGS "@TAMM_CXX_FLAGS@")
set(TAMM_EXTRA_LIBS "@TAMM_EXTRA_LIBS@")
set(CBLAS_HEADER @CBLAS_HEADER@)
set(LAPACKE_HEADER @LAPACKE_HEADER@)
set(TAMM_LAPACK_INT @TAMM_LAPACK_INT@)
set(TAMM_LAPACK_COMPLEX8 @TAMM_LAPACK_COMPLEX8@)
set(TAMM_LAPACK_COMPLEX16 @TAMM_LAPACK_COMPLEX16@)
set(USE_BLIS @USE_BLIS@)
set(USE_CUTENSOR @USE_CUTENSOR@)
set(USE_OPENMP @USE_OPENMP@)
set(USE_CUDA @USE_CUDA@)
set(USE_GA_DEV @USE_GA_DEV@)
set(USE_SCALAPACK @USE_SCALAPACK@)
set(CUDA_MAXREGCOUNT @CUDA_MAXREGCOUNT@)

#USE_TALSH,LAPACK_ILP64

#Find the dependencies
include(DependencyMacros)
set(__depends @NWX_DEPENDENCIES@)
foreach(__depend_i ${__depends})
    find_dependency(${__depend_i})
    dependency_to_variables(${__depend_i} ${__NAME}_INCLUDE_DIRS
                                          ${__NAME}_LIBRARIES
                                          ${__NAME}_DEFINITIONS)
endforeach()

#Print our hardwork out
message(STATUS "Found ${__name} include paths: ${${__NAME}_INCLUDE_DIRS}")
message(STATUS "Found ${__name} libraries: ${${__NAME}_LIBRARIES}")
message(STATUS "Found ${__name} definitions: ${${__NAME}_DEFINITIONS}")
